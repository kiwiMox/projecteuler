using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Numerics;

namespace ProjectEuler
{
    public static class ProblemHelper
    {
        #region constants

        public static List<int> NumbersOneToTen = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        public static List<int> NumbersOneToTwenty = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };

        public static BigInteger ThousandDigitNumber = BigInteger.Parse("7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450", CultureInfo.InvariantCulture);

        public static string ThousandDigitNumberText = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

        #endregion

        public static long FindFactor(long value)
        {
            for (var factor = 2; factor < value; factor++)
            {
                if (!IsPrime(factor)) continue;

                if (value % factor != 0) continue;

                return factor;
            }

            return 0;
        }

        public static bool IsPrime(long number)
        {
            var boundary = Math.Floor(Math.Sqrt(number));

            if (number == 1) return false;
            if (number == 2) return true;

            for (var i = 2; i <= boundary; ++i)
            {
                if (number % i == 0) return false;
            }

            return true;
        }

        public static bool IsPalindrome(long value)
        {
            var forward = value.ToString();
            var reverse = string.Concat(value.ToString().Reverse());

            return string.Compare(forward, reverse) == 0;
        }

        public static int GetPrimeAtIndex(int index)
        {
            var primeNumbers = new List<int>();
            var numberToCheck = 1;

            while (primeNumbers.Count <= index)
            {
                if (IsPrime(numberToCheck))
                    primeNumbers.Add(numberToCheck);

                numberToCheck++;
            }

            return primeNumbers[index];
        }
    }
}
